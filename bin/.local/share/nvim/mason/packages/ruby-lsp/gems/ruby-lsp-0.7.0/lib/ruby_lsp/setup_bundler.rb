# typed: strict
# frozen_string_literal: true

require "bundler"
require "fileutils"
require "pathname"

# This file is a script that will configure a custom bundle for the Ruby LSP. The custom bundle allows developers to use
# the Ruby LSP without including the gem in their application's Gemfile while at the same time giving us access to the
# exact locked versions of dependencies.

# Do not setup a custom bundle if we're working on the Ruby LSP, since it's already included by default
if Pathname.new(Dir.pwd).basename == "ruby-lsp"
  warn("Ruby LSP> Skipping custom bundle setup since we're working on the Ruby LSP itself")
  return
end

# We need to parse the Gemfile.lock manually here. If we try to do `bundler/setup` to use something more convenient, we
# may end up with issues when the globally installed `ruby-lsp` version mismatches the one included in the `Gemfile`
dependencies = Bundler::LockfileParser.new(Bundler.read_file("Gemfile.lock")).dependencies

# When working on a gem, the `ruby-lsp` might be listed as a dependency in the gemspec. We need to make sure we check
# those as well or else we may get version mismatch errors
gemspec_path = Dir.glob("*.gemspec").first
if gemspec_path
  gemspec_dependencies = Bundler.load_gemspec(gemspec_path).dependencies.to_h { |dep| [dep.name, dep] }
  dependencies.merge!(gemspec_dependencies)
end

# Do not setup a custom bundle if both `ruby-lsp` and `debug` are already in the Gemfile
if dependencies["ruby-lsp"] && dependencies["debug"]
  warn("Ruby LSP> Skipping custom bundle setup since both `ruby-lsp` and `debug` are already in the Gemfile")
  return
end

# Automatically create and ignore the .ruby-lsp folder for users
FileUtils.mkdir(".ruby-lsp") unless Dir.exist?(".ruby-lsp")
File.write(".ruby-lsp/.gitignore", "*") unless File.exist?(".ruby-lsp/.gitignore")

parts = [
  "# This custom gemfile is automatically generated by the Ruby LSP.",
  "# It should be automatically git ignored, but in any case: do not commit it to your repository.",
  "",
  "eval_gemfile(File.expand_path(\"../Gemfile\", __dir__))",
]

unless dependencies["ruby-lsp"]
  parts << 'gem "ruby-lsp", require: false, group: :development, source: "https://rubygems.org"'
end

unless dependencies["debug"]
  parts << 'gem "debug", require: false, group: :development, platforms: :mri, source: "https://rubygems.org"'
end

gemfile_content = parts.join("\n")

unless File.exist?(".ruby-lsp/Gemfile") && File.read(".ruby-lsp/Gemfile") == gemfile_content
  File.write(".ruby-lsp/Gemfile", gemfile_content)
end

# If .ruby-lsp/Gemfile.lock already exists and the top level Gemfile.lock hasn't been modified since it was last
# updated, then we're ready to boot the server
if File.exist?(".ruby-lsp/Gemfile.lock") && File.stat(".ruby-lsp/Gemfile.lock").mtime > File.stat("Gemfile.lock").mtime
  warn("Ruby LSP> Skipping custom bundle setup since .ruby-lsp/Gemfile.lock already exists and is up to date")
  return
end

FileUtils.cp("Gemfile.lock", ".ruby-lsp/Gemfile.lock")

# If the user has a custom bundle path configured, we need to ensure that we will use the absolute and not relative
# version of it when running bundle install. This is necessary to avoid installing the gems under the `.ruby-lsp`
# folder, which is not the user's intention. For example, if path is configured as `vendor`, we want to install it in
# the top level `vendor` and not `.ruby-lsp/vendor`
path = Bundler.settings["path"]

command = +""
# Use the absolute `BUNDLE_PATH` to prevent accidentally creating unwanted folders under `.ruby-lsp`
command << "BUNDLE_PATH=#{File.expand_path(path, Dir.pwd)} " if path
# Install gems using the custom bundle
command << "BUNDLE_GEMFILE=.ruby-lsp/Gemfile bundle install "
# Redirect stdout to stderr to prevent going into an infinite loop. The extension might confuse stdout output with
# responses
command << "1>&2"

warn("Ruby LSP> Running bundle install for the custom bundle. This may take a while...")
system(command)
